function fixPackages(packages: string): string {
  let stack: string[] = [];

  for (let char of packages) {
    if (char == ")") {
      let temp: string = "";
      while (stack.length > 0 && stack[stack.length - 1] !== "(") temp += stack.pop();
      stack.pop();
      stack.push(...temp);
    } else stack.push(char);
  }

  return stack.join("");
}

/*
Â¡El grinch ðŸ‘¹ ha pasado por el taller de Santa Claus! Y menudo desastre ha montado. Ha cambiado el orden de algunos paquetes, por lo que los envÃ­os no se pueden realizar.

Por suerte, el elfo Pheralb ha detectado el patrÃ³n que ha seguido el grinch para desordenarlos. Nos ha escrito las reglas que debemos seguir para reordenar los paquetes. Las instrucciones que siguen son:

RecibirÃ¡s un string que contiene letras y parÃ©ntesis.
Cada vez que encuentres un par de parÃ©ntesis, debes voltear el contenido dentro de ellos.
Si hay parÃ©ntesis anidados, resuelve primero los mÃ¡s internos.
Devuelve el string resultante con los parÃ©ntesis eliminados, pero con el contenido volteado correctamente.
Nos ha dejado algunos ejemplos:
*/
console.log(fixPackages("a(cb)de"));
// âžž "abcde"
// Volteamos "cb" dentro de los parÃ©ntesis

console.log(fixPackages("a(bc(def)g)h"));
// âžž "agdefcbh"
// 1Âº volteamos "def" â†’ "fed", luego volteamos "bcfedg" â†’ "gdefcb"

console.log(fixPackages("abc(def(gh)i)jk"));
// âžž "abcighfedjk"
// 1Âº volteamos "gh" â†’ "hg", luego "defhgi" â†’ "ighfed"

console.log(fixPackages("a(b(c))e"));
// âžž "acbe"
// 1Âº volteamos "c" â†’ "c", luego "bc" â†’ "cb"
